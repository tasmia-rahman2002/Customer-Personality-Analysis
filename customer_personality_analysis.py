# -*- coding: utf-8 -*-
"""Customer_personality_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1icVvMUy01EH9EoGzVVyk2khpNxc6Bi_I

### Importing Libraries
"""

## main Libraries
import numpy as np
import pandas as pd

## Datetime , i will need it in feature engineering step
from datetime import date

## Vis. Libraries
import missingno as msno
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
from plotly.offline import init_notebook_mode, iplot
from yellowbrick.cluster import KElbowVisualizer

## preprocessing Libraries
from sklearn.preprocessing import LabelEncoder, RobustScaler
import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import datetime

import numpy as np

import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns

from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn import preprocessing

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
## CLustering
from sklearn.cluster import KMeans ##, AgglomerativeClustering
## ignore warnings
import warnings
warnings.filterwarnings('ignore')

## setting some Libraries
pd.set_option('display.max_columns', None)
sns.set(rc={"figure.figsize" : [12,8]}, font_scale=1.2 , style='darkgrid')
## Set the figure and axes face color
sns.set(rc={"axes.facecolor": "#FFE4D9", "figure.facecolor": "#FFE4D9"})
## custom palette
custom_palette = ["#682F2F", "#9E726F", "#D6B2B1", "#B9C0C9", "#9F8A78", "#F3AB60"]
sns.set_palette(custom_palette)
pio.templates.default = "ggplot2"
init_notebook_mode(connected=True)

"""###  Data Loading"""

df = pd.read_csv("marketing_campaign.csv", sep="\t")

df.head(30)

df.shape

"""### Statistical information about the data"""

df.describe(include="number").T

"""#### `Note :`
    - Income : mean almost equal 52247 and min value equal 1730 and max value equal 666666
               The outliers here may be due to the difference in education level of each customer
    - Year_Birth : mean almost equal 1969 and min equal 1893 and max equal 1996
    - age : mean equal 54
    - Kidhome : min equal 0 (They have no children) and max equal 2
    - Teenhome : min equal 0 (They don't have teens) and max equal 2
    - Customers spend more on meat products
    - Customers spend least on fruits products
"""

df.describe(include="O").T

"""#### `Note :`
    - Education Feature : mode is Graduation and has 5 unique values
    - Marital_Status Feature : mode is Married and has 8 unique values

-------------

<a id="1"></a>
<div style="padding:20px;
            color:black;
            margin:10;
            font-size:170%;
            text-align:left;
            display:fill;
            border-radius:5px;
            background-color:#B3E5B2;
            overflow:hidden;
            font-weight:700"><span style='color:#CDA63A'></span> Data Preprocessing
</div>

## Data Cleaning
"""

df.info()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:60%;
                                                 margin: auto;
                                                 text-align: left;">
<b>Note : </b>Dt_Customer Column Data type is Object, I will Convert it to Datetime Datatype.</div>
"""

df["Dt_Customer"] = pd.to_datetime(df["Dt_Customer"], format="%d-%m-%Y", errors="coerce")
## 'coerce' invalid parsing will be set as NaT.

df["Dt_Customer"].info()

"""### Null Values"""

msno.matrix(df)
plt.title("Null Value graph.", fontsize=20, weight="bold")
plt.show()

(df.isna().sum() / df.shape[0]) * 100

df["Income"].describe()

sns.boxplot(y="Income", data=df)
plt.title("Income BoxPlot", weight="bold")
plt.show()

sns.barplot(x="Education", y="Income", data=df)
plt.title("mean of Income by Education level".title() , weight="bold")
plt.show()

"""### Imputing by Sub-Group"""

income_imputer = df.groupby("Education")["Income"].median().to_dict()
income_imputer

df["Income"] = df["Income"].fillna(df["Income"].map(income_imputer))

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:60%;
                                                 margin: auto;
                                                 text-align: left;">
<b>Note : </b> i filled Missing Values in Income Column with median by Education Level as Sub-Group. i did it because there is outliers and Income varies depending on the level of education.</div>

### Duplicated
"""

df.duplicated().sum()

"""## <b>2.2 <span style='color:#682F2F'>Feature Engineering (Extraction) and Data Preparation</span></b>"""

df.sample(5)

data = df.copy()

## age feature creation
data['Age'] = 2023 - data['Year_Birth']

## Spending feature creation
data['spending'] = data['MntWines'] + data['MntFruits'] + data['MntMeatProducts'] + data['MntFishProducts'] \
                        + data['MntSweetProducts'] + data['MntGoldProds']

## Seniority feature creation
last_date = date(2023,9, 10)

def seniority(x):
    return last_date - x

data['Seniority'] = pd.to_numeric(data['Dt_Customer'].dt.date.apply(seniority).dt.days, downcast='integer')/365

## rename some cols
data=data.rename(columns={'NumWebPurchases': 'Web','NumCatalogPurchases':'Catalog','NumStorePurchases':'Store'})

data["Marital_Status"].unique()

## Matrial Status, i will  convert to 2 unique values ..
## Alone ==> Divorced, Single, Absurd, Widow , YOLO.
## In couple ==> Married, Together.
data["Marital_Status"] = data['Marital_Status'].replace({'Divorced':'Alone','Single':'Alone','Married':'In couple','Together':'In couple','Absurd':'Alone','Widow':'Alone','YOLO':'Alone'})

data["Marital_Status"].nunique()

print(f"Education column number of unique value : {data['Education'].nunique()}")
print(f"Education column unique value : {data['Education'].unique()}")

data['Education'].value_counts()

## Education column , i will  convert to 2 unique values ..
## ungrad. ==> Basic, 2n Cycle .
## postgrad. ==> Graduation, Master, PhD.
data['Education']=data['Education'].replace({'Basic':'Undergraduate','2n Cycle':'Undergraduate','Graduation':'Postgraduate','Master':'Postgraduate','PhD':'Postgraduate'})

print(f"after update , Education column number of unique value : {data['Education'].nunique()}")
print(f"after update , Education column unique value : {data['Education'].unique()}")

print(f"num of unique value in kidhome : {data['Kidhome'].nunique()}")
print(f"num of unique value in Teenhome : {data['Teenhome'].nunique()}")

used_cols = ["Kidhome", "Teenhome"]

fig, ax = plt.subplots(1, 2, figsize = (18,5))

for i in range(2):
    sns.countplot(ax=ax[i], data=data, x=used_cols[i])
    ax[i].set_title(f"{used_cols[i]} Countplot.", weight="bold")
    ax[i].set_ylabel("Count")

plt.show()

## Children feature creation
data['Children'] = data['Kidhome'] + data['Teenhome']

def has_chid_or_no(x):
    if x > 0:
        return "Has child"
    else :
        return "no child"

data['Has_child'] = data["Children"].apply(has_chid_or_no)

data['Has_child'].value_counts()

data['Children'].replace({3: "3 children",2:'2 children',1:'1 child',0:"No child"},inplace=True)

data['Children'].value_counts()

## rename some cols
data = data.rename(columns={'MntWines': "Wines",
                            'MntFruits':'Fruits',
                            'MntMeatProducts':'Meat',
                            'MntFishProducts':'Fish',
                            'MntSweetProducts':'Sweets',
                            'MntGoldProds':'Gold',
                            'NumDealsPurchases':'Deals'})

data[['AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5','Response']].sample(5)
## Response: 1 if customer accepted the offer in the last campaign, 0 otherwise

## Campaigns_Accepted feature creation
data['Campaigns_Accepted'] = data[['AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5']].sum(axis=1)

data['Campaigns_Accepted'].value_counts().to_frame()

## drop some features
drop_list =['ID', 'Year_Birth' ,'Kidhome','Teenhome', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5','AcceptedCmp1', 'AcceptedCmp2', 'Z_CostContact','Z_Revenue']
data.drop(drop_list, inplace=True, axis=1)
data.columns

"""# select part from data
data = data[['Age', 'Education', 'Marital_Status', 'Dt_Customer' , 'Income', 'spending', 'Seniority', 'Has_child', 'Children', 'Wines', 'Fruits', 'Meat', 'Fish', 'Sweets', 'Gold' ,'Web', "NumWebVisitsMonth" ,'Catalog', 'Store', 'Campaigns_Accepted', 'NumDealsPurchases' ,'Response','Complain','Recency']]
data.tail()
"""

## rename columns
data.columns = data.columns.str.capitalize()g

"""---------------

<a id="1"></a>
<div style="padding:20px;
            color:black;
            margin:10;
            font-size:170%;
            text-align:left;
            display:fill;
            border-radius:5px;
            background-color:#B3E5B2;
            overflow:hidden;
            font-weight:700"> <span style='color:#B3E5B2'></span> Data Analysis
</div>

## Univariate Analysis
###### - explores each variable in a data set, separately.
"""

data.sample(3)

"""###### 'Age Column'"""

np.floor(data["Age"].describe()).to_frame()

fig, ax = plt.subplots(1, 2, figsize = (10,5))
sns.histplot(ax=ax[0], data=data, x="Age")
sns.boxplot(ax=ax[1], data=data, y="Age")
fig.suptitle('Age Distribution', weight="bold")
plt.show()

## replace outliers with mean value
age_mean = data['Age'].mean()
data.loc[data['Age'] > 83,'Age'] = age_mean

np.floor(data["Age"].describe()).to_frame()

fig = px.histogram(data["Age"], marginal="box", title="<b>Age Distribution After Handling Outliers",
                   color_discrete_map={"Age":"darkred"})
fig.show()

print(f"Skewness of Age Distribution is {data['Age'].skew()}")

"""###### `The ages of customers range from 11 to 83, and the average age is equal to 54`

###### 'Income Column'
- Customer's yearly household income
"""

data['Income'].describe().to_frame()

"""The average income is 52247.25 and the min income value is 1730"""

sns.histplot(data=data, x="Income")
plt.title("Income Distribution", weight="bold")
plt.show()

sns.boxplot(data=data, y="Income")
sns.stripplot(data=data, y="Income", jitter=0.8, alpha=0.1, color='black')
plt.title("Income Distribution", weight="bold")
plt.show()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:40%;
                                                 margin: auto;
                                                 text-align: left;">
<b>NOTE : </b>Income column have outliers, let's handle it.</div>
"""

## drop outliers
data = data.loc[(data["Income"] <= 200000)]
## reset index after drop outliers
data.reset_index(drop=True, inplace=True)
print(f'Shape After Drop Outliers : {data.shape}')
print(f'Statistics Info. about Income : \n{data["Income"].describe()}')

fig = px.histogram(data["Income"], marginal="box", title="<b>Income Distribution After Handling Outliers",
                  color_discrete_map={"Income":"darkred"})
fig.show()

print(f"Skewness of Income Distribution is {data['Income'].skew()}")

"""##### 'Seniority Column'
- The customer has been dealing with the company for how many years
"""

data['Seniority'].describe()

plt.hist(x=data["Seniority"])
plt.title("Seniority Distribution", weight="bold")
plt.show()

"""### 'Products'
- ['Wines', 'Fruits', 'Meat', 'Fish', 'Sweets', 'Gold']
- Amount spent in last 2 years
"""

products = data[['Wines', 'Fruits', 'Meat', 'Fish', 'Sweets', 'Gold']]
products.describe()

"""
<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:60%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> - Right Skewed (Positive) in ALL PRODUCTS: The mean is greater than the median</div>"""

data[['Wines', 'Fruits', 'Meat', 'Fish', 'Sweets', 'Gold']].sum()

plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=0.5)
plt.suptitle("Products Distribution (Right skewed).", fontsize=18, y=0.95, weight="bold")



for i, product in enumerate(products.columns.tolist()):

    # add a new subplot iteratively
    ax = plt.subplot(3, 2, i + 1)
    sns.histplot(ax=ax, data=products, x=products[product])

    # chart formatting
    ax.set_title(f"{product} Products")
    ax.set_xlabel("")

plt.show()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:60%;
                                                 margin: auto;
                                                 text-align: left;">
<b>Note : </b> Distribution plots indicate skewed to the right distributions of features. Thus, it is crucial to avoid assuming that a product (e.g., Wines, meats) is the top-selling. </div>

###### Spending Columns
"""

data["Spending"].describe().to_frame()

"""
<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:60%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> - Right Skewed (Positive) in ALL PRODUCTS: The mean is greater than the median</div>"""

sns.histplot(data=data, x="Spending", kde=True, edgecolor="black")
plt.title("Spent Distribution.", weight="bold")
plt.show()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:45%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> More than 50% of customers spend less than 10000$ </div>

##### Education Column
"""

sns.countplot(data=data, x="Education",edgecolor="black")
plt.title("Frequency Distribution of Education Level.", weight="bold")
plt.xlabel("Education Level")
plt.ylabel("Frequency")
plt.show()

pd.DataFrame({"Count" : data["Education"].value_counts(),
              "Ratio" : round(data["Education"].value_counts(normalize=True),2)*100})

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:30%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> The majority is Postgraduate, 89%. </div>

##### Marital_status Column
"""

sns.countplot(data=data, x="Marital_status", edgecolor="black")
plt.title("Frequency Distribution of Marital Status.", weight="bold")
plt.xlabel("Marital Status")
plt.ylabel("Frequency")
plt.show()

pd.DataFrame({"Count" : data["Marital_status"].value_counts(),
              "Ratio" : round(data["Marital_status"].value_counts(normalize=True),2)*100})

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:25%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> The majority is In couple, 65%. </div>

##### 'Children Column'
- sum of kidhome and teenhome columns
"""

pd.DataFrame({"Count" : data["Children"].value_counts(),
              "Ratio" : round(data["Children"].value_counts(normalize=True),2)*100})

ax = sns.countplot(data=data, x="Children", edgecolor="black",
                   order = data['Children'].value_counts().index)
for label in ax.containers:
    ax.bar_label(label)
plt.title("Frequency Distribution of Children.", weight="bold")
plt.xlabel("Children")
plt.ylabel("Frequency")
plt.show()

"""
<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:25%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> 50% of clients have one child. </div>"""

pd.DataFrame({"Count" : data["Has_child"].value_counts(),
              "Ratio" : round(data["Has_child"].value_counts(normalize=True),2)*100})

px.histogram(data,
             x="Has_child",
             color_discrete_sequence=px.colors.qualitative.Antique,
             title= "<b>Visualizing Has Child Feature Frequencies")

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:25%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> 71% of customers have children. </div>

###### 'Campaigns_accepted Column'
- sum of AcceptedCmp
"""

## check data type
data["Campaigns_accepted"].dtype

data["Campaigns_accepted"].unique()

pd.DataFrame({"Count" : data["Campaigns_accepted"].value_counts(),
              "Ratio" : round(data["Campaigns_accepted"].value_counts(normalize=True),3)*100})

ax = sns.countplot(data=data, x="Campaigns_accepted", edgecolor="black")
for label in ax.containers:
    ax.bar_label(label)
plt.title("Visualizing Campaigns Accepted Feature Frequencies", weight="bold")
plt.xlabel("Campaigns Accepted")
plt.ylabel("Frequency")
plt.show()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:45%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> The majority of campaigns are unacceptable, at a rate of 79% . </div>

##### 'Response Column'
-  1 if customer accepted the offer in the last campaign, 0 otherwise
"""

## et's see the unique value
df["Response"].unique()

pd.DataFrame({"Count" : data["Response"].value_counts(),
              "Ratio" : round(data["Response"].value_counts(normalize=True),3)*100})

"""##### 'Recency Column'
-  Number of days since customer's last purchase
"""

data["Recency"].dtype

data["Recency"].describe()

sns.histplot(data=data,
            x="Recency",
            edgecolor='black')
plt.title("Recency Distribution.", weight="bold")
plt.show()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:29%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> Last Purchase in Range 1,89 Days. </div>

--------------

##### 'Place'
- ['Web', 'Catalog', 'Store']
- Web: Number of purchases made through the company’s website
- Catalog: Number of purchases made using a catalogue
- Store: Number of purchases made directly in stores
"""

used_cols = ['Web', 'Catalog', 'Store']

fig, ax = plt.subplots(1, 3, figsize = (18,5))
plt.suptitle("Exploring Num of Purchases", fontsize=20, weight="bold")

for i in range(3):
    sns.countplot(ax=ax[i], data=data, x=used_cols[i], palette=sns.cubehelix_palette())
    ax[i].set_title(f"{used_cols[i]} Dist.")
    ax[i].set_ylabel("Count")

plt.show()

"""---------------"""

data[['Web', 'Catalog', 'Store']].describe()

Purchases = pd.DataFrame(data[['Web', 'Catalog', 'Store']].sum()).rename(columns={0:"Count"})
Purchases

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:40%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> Most purchases are made through the store and web.</div>

"""

Purchases.plot(kind='bar', legend=False)
plt.title("Purchases places.".title(), fontsize=18, weight="bold")
plt.xticks(rotation=0.45)
plt.xlabel("Place", fontsize=18)
plt.ylabel("Count", fontsize=18)
# Display the plot
plt.show()

"""-----------

##### 'Complain Column'
- 1 if the customer complained in the last 2 years, 0 otherwise
"""

pd.DataFrame({"Count" : data["Complain"].value_counts(),
              "Ratio" : round(data["Complain"].value_counts(normalize=True),3)*100})

Complain_counts = data["Complain"].value_counts()
plt.pie(Complain_counts.values,
        labels=Complain_counts.index.map({0: "No", 1: "Yes"}),
        explode=[0.2,0],
        shadow=True,
        textprops=dict(size= 20, color= "white", weight="bold"),
        autopct="%.2f%%",
        wedgeprops=dict(edgecolor = "black", linewidth = 3),
        startangle = 20)
plt.title("Number of Complaints in The Past Two Years")
plt.legend(["No", "Yes"])
plt.show()

"""<div class="alert alert-block alert-info" style="background-color:#D6B2B1;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:45
                                                 
                                                 
                                                 
                                                 
                                                 
                                                 
                                                 
                                                 %;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> 99% of customers have not complained in the past two years . </div>

##### 'Dt_Customer'
- Date of customer's enrollment with the company
"""

## month feature creation
data["customer_month"] = data["Dt_customer"].dt.month_name()
## year feature creation
data["customer_year"] = data["Dt_customer"].dt.year
## day feature creation
data["day_name"] = data["Dt_customer"].dt.day_name()

data["customer_month"].value_counts().sort_values(ascending=False)

data["customer_year"].value_counts().sort_values(ascending=False)

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:30%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> In 2013, we gained many customers.</div>

###### 'Numwebvisitsmonth Column'
- Number of visits to company’s website in the last month
"""

data["Numwebvisitsmonth"].describe()

data["Numwebvisitsmonth"].sum()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:35%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> The Total of Num Web Visits Month = 11781.</div>

-----------------

## <b>3.2 <span style='color:#682F2F'>Bi-variate/Multivariate analysis</span></b>

#### `1. Is there a relationship between age and annual income? Does income tend to increase or decrease with age?`
"""

corre = data[["Income", "Age"]].corr()
print(f"The Correlation Between Income and Age = {round(corre.loc['Age','Income'],3)}")

def scatter_plot(Data, X, Y, h=None):
    sns.scatterplot(data=Data, x=X, y=Y,  hue=h)
    plt.title(f"Correlation Between {X} and {Y}.")
    plt.xlabel(f"{X}")
    plt.ylabel(f"{Y}")
    plt.show()

scatter_plot(Data=data, X="Income", Y="Age")

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:45%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> The Correlation Between (Income, Age) is Weak Positive Corr.</div>

#### `2. Are there differences in purchase preferences between married and single individuals?`
"""

data.groupby('Marital_status')['Spending'].sum().to_frame()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:53%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> Obviously, Married Customers Spend More Money Than Single Customers.</div>

"""

products_list = ['Wines', 'Fruits', 'Meat', 'Fish', 'Sweets', 'Gold']

l = data.groupby('Marital_status')[products_list].sum()

fig = px.bar(data_frame=l.reset_index(), x='Marital_status',
            y=['Wines', 'Fruits', 'Meat', 'Fish', 'Sweets', 'Gold'],
            barmode="group", title="<b> Marital Status by Products Purchase",
            color_discrete_sequence=px.colors.sequential.Greys_r)
fig.show()

"""#### `3. Is there a relationship between education level and annual income?`"""

data.groupby("Education")["Income"].sum().to_frame()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:55%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> Postgraduate Customer have more income than Undergraduate .</div>

"""

fig = px.histogram(data_frame=data, x="Income", color="Education",
                   title= "Income Distribution by Education Category", color_discrete_sequence=px.colors.qualitative.Antique)
fig.show()

fig1 = px.box(data_frame=data, x="Education", y="Income",
             title= "<b> Income Distribution by Education Category", color_discrete_sequence=px.colors.qualitative.Antique)
fig2 = px.strip(data, x="Education", y="Income", color_discrete_sequence=px.colors.qualitative.Antique)
all_fig = go.Figure(data=fig1.data + fig2.data, layout=fig1.layout) ## combine
all_fig.show()

"""#### 4. explore the correlation between Age and Income.`"""

data[["Age", "Income"]].corr()

px.scatter(data_frame=data, x="Income", y="Age",
           title="<b>Correlation Between Age and Income",  color_discrete_sequence=px.colors.qualitative.Antique)

"""**The Correlation between income and age is Weak Positive.**

#### `Divide the data into age groups and compare the income levels within each group.`
"""

## List of bins
bins = [20, 40, 60 , 80, np.inf]
print(bins)

## Define labels
labels = ['20-40', '40-60', '60-80', 'Over 80']
print(labels)

# Customers Age Group
data["Age_Group"] = pd.cut(data["Age"], bins, labels=labels)

data.groupby("Age_Group")["Income"].sum().sort_values(ascending=False).reset_index()

"""**The highest income is for people between the ages of 40-60**"""

fig = px.histogram(data_frame=data,
       x="Age_Group",
       y="Income",  color="Age_Group", color_discrete_sequence=px.colors.qualitative.Antique)
fig.show()

"""#### `5. How does customer spending vary by month?`"""

## the average spending score and total purchase amount for each month.
data.groupby("customer_month")["Spending"].agg(["mean","sum"])

# Create a line plot to visualize the variations in customer spending across months.
fig = px.box(data_frame=data, x="customer_month", y="Spending", color="customer_month", title="<b>Monthly Spending",
             color_discrete_sequence=px.colors.qualitative.Antique)
fig.update_layout(
    xaxis=dict(title="Month"),
    yaxis=dict(title="Spending Amount")
)
fig.show()

sns.lineplot(data=data, x="customer_month", y="Spending", ci=False, estimator=sum, color="black")
plt.title("Monthly Spending", weight="bold")
plt.xlabel("Month")
plt.ylabel("Spending Amount")
plt.xticks(rotation=45)
plt.show()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:45%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> August shows the highest amount, while July exhibits the lowest. </div>

#### `7. Day Vs. Spending`
"""

data.groupby("day_name")["Spending"].sum().sort_values(ascending=False)

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:40%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> Higher spending on Monday, less spending on Tuesday.</div>
"""

sns.lineplot(data=data, x="day_name", y="Spending", ci=False, estimator=sum, color="black")
plt.title("Day Spending", weight="bold")
plt.xlabel("Day")
plt.ylabel("Spending Amount")
plt.xticks(rotation=45)
plt.show()

"""#### `8. Income Vs. Spending`"""

data[["Income", "Spending"]].corr()

"""<div class="alert alert-block alert-info" style="background-color:#B3E5B2;
                                                 color:black;
                                                 border-color:black;
                                                 border-radius:5px;
                                                 width:45%;
                                                 margin: auto;
                                                 text-align: left;">
<b></b> There is a Positive Correlation between Income and Spending.</div>

"""

fig = px.scatter(data_frame=data, x="Income",y="Spending", color="Education",
                 color_discrete_sequence=px.colors.qualitative.Antique,
                 title="<b>Correlation between Income and Spending")
fig.show()

"""#### `9. Deals Vs. (day, month, year)`"""

sns.lineplot(data=data, x="customer_month", y="Deals", ci=False, estimator=sum, color="black")
plt.title("Deals Over Time", weight="bold")
plt.xlabel("Month")
plt.ylabel("Deals Count")
plt.xticks(rotation=45)
plt.show()

"""**The month with the most offers is August and the month with the most spending is August.**
**Let's show the correlation between spending and deals**
"""

data[["Deals", "Spending"]].corr()

fig = px.scatter(data_frame=data, y="Deals", x="Spending",
                 color_discrete_sequence=px.colors.qualitative.Antique,
                 title="<b>Correlation between Deals and Spending")
fig.show()

"""**There is no correlation between Deals and Spending.**

----------------

<a id="1"></a>
<div style="padding:20px;
            color:black;
            margin:10;
            font-size:170%;
            text-align:left;
            display:fill;
            border-radius:5px;
            background-color:#B3E5B2;
            overflow:hidden;
            font-weight:700"> <span style='color:#CDA63A'></span> Data Preparation for ML Model
</div>
"""

## create copy from data
df_final = data.copy()
print(df_final.shape)

## Select Categorical Columns
categorical_cols = df_final.select_dtypes(include="object").columns.to_list()
print(categorical_cols)

"""## <b>4.1 <span style='color:#682F2F'> Encoding </span></b>

**Label Encoding is a technique that is used to convert categorical columns into numerical ones so that they can be fitted by machine learning models which only take numerical data. It is an important pre-processing step in a machine-learning project.**
"""

label_encoding = LabelEncoder() ## Create label_encoding object

for col in categorical_cols:
    df_final[col] = label_encoding.fit_transform(df_final[col])

df_final.sample(10) ## Take a sample

categorical_cols = df_final.select_dtypes(include="object").columns.to_list()
print(f" Categorical columns : {categorical_cols}")

"""**Encoding Done**"""

cols_drop = ["Age_Group", "Dt_customer", "day_name","customer_month","customer_year"] ## Select Cols to drop
df_final.drop(cols_drop, axis=1, inplace=True)

df_final.sample(10)

"""---------------

<a id="1"></a>
<div style="padding:20px;
            color:black;
            margin:10;
            font-size:170%;
            text-align:left;
            display:fill;
            border-radius:5px;
            background-color:#B3E5B2;
            overflow:hidden;
            font-weight:700"> <span style='color:#CDA63A'></span> Model training, testing and evaluation
</div>
"""

from sklearn.model_selection import train_test_split

df_final.columns

X_train, X_test, y_train, y_test = train_test_split(df_final[['Education', 'Marital_status', 'Income', 'Recency', 'Wines', 'Fruits',
       'Meat', 'Fish', 'Sweets', 'Gold', 'Deals', 'Web', 'Catalog', 'Store',
       'Numwebvisitsmonth', 'Complain','Age', 'Spending',
       'Seniority', 'Children', 'Has_child','Campaigns_accepted']],df_final['Response'],
                                                    test_size = 0.20,
                                                    random_state=1)

X_train.shape, X_test.shape

"""### Decision Tree Classifier"""

from sklearn.tree import DecisionTreeClassifier

dt_model = DecisionTreeClassifier(random_state=1)
dt_model.fit(X_train, y_train)
dt_pred = dt_model.predict(X_test)

dt_error= np.mean(dt_pred != y_test)
print(f"Decision Tree Error: {dt_error:.2f}")

dt_accuracy = accuracy_score(y_test, dt_pred)
print(f"Decision Tree Accuracy: {dt_accuracy:.2f}")

"""### Random Forest"""

RF_model = RandomForestClassifier(random_state=1)
RF_model.fit(X_train, y_train)
RF_pred = RF_model.predict(X_test)

RF_error = np.mean(RF_pred != y_test)
print(f"RF Error: {RF_error:.2f}")

RF_accuracy = accuracy_score(y_test, RF_pred)
print(f"RF Accuracy: {RF_accuracy:.2f}")

"""### Logistic Regression"""

LR_model = LogisticRegression(random_state=1)
LR_model.fit(X_train, y_train)
LR_pred = LR_model.predict(X_test)

LR_error = np.mean(LR_pred != y_test)
print(f"LR Error: {LR_error:.2f}")

LR_accuracy = accuracy_score(y_test, LR_pred)
print(f"LR Accuracy: {LR_accuracy:.2f}")

"""<a id="1"></a>
<div style="padding:20px;
            color:black;
            margin:10;
            font-size:170%;
            text-align:left;
            display:fill;
            border-radius:5px;
            background-color:#B3E5B2;
            overflow:hidden;
            font-weight:700"> <span style='color:#CDA63A'></span>Apply XAI Methods
</div>

### Feature Importance with SHAP
"""

from sklearn.metrics import accuracy_score

# Train the model
model = RandomForestClassifier(n_estimators=100, random_state=1)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Model Accuracy: {accuracy:.2f}')

import shap

# Explain predictions using SHAP values
explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X_test)

# Visualize feature importance
shap.summary_plot(shap_values, X_test)

"""### Local Interpretability with LIME"""

from lime import lime_tabular

# Explain a single prediction using LIME
explainer = lime_tabular.LimeTabularExplainer(X_train.values, feature_names=X_train.columns, mode='classification')
exp = explainer.explain_instance(X_test.iloc[0].values, model.predict_proba)

# Visualize explanation
exp.show_in_notebook()